name: Pre-Release Workflow

on:
  push:
    branches:
      - main

jobs:
  version-update:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Get current version from the latest tag
      - name: Get current version
        id: get_version
        run: echo "VERSION=$(git describe --tags --abbrev=0 || echo '0.0.0')" >> $GITHUB_ENV

      # Step 3: Determine next version
      - name: Determine next version
        id: versioning
        run: |
          CURRENT_VERSION=${{ env.VERSION }}
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          # Increment the minor version for demonstration
          NEW_VERSION="$MAJOR.$((MINOR + 1)).$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=release/$NEW_VERSION" >> $GITHUB_ENV

      # Step 4: Check if release branch already exists
      - name: Check if release branch exists
        id: check_release_branch
        run: |
          git fetch origin
          if git branch -r | grep "origin/${{ env.RELEASE_BRANCH }}"; then
            echo "RELEASE_BRANCH_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_BRANCH_EXISTS=false" >> $GITHUB_ENV
          fi

      # Step 5: Merge or Create Release Branch
      - name: Create or Update Release Branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if [ "${{ env.RELEASE_BRANCH_EXISTS }}" == "true" ]; then
            # If the branch exists, merge the latest changes from main
            git checkout ${{ env.RELEASE_BRANCH }}
            git merge origin/main
          else
            # If the branch does not exist, create it
            git checkout -b ${{ env.RELEASE_BRANCH }}
          fi
          git push origin ${{ env.RELEASE_BRANCH }}

      # Step 6: Update version in package.json and Cargo.toml
      - name: Update version files
        run: |
          jq ".version = \"$NEW_VERSION\"" package.json > temp.json && mv temp.json package.json
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}

      # Step 7: Commit version updates to the release branch
      - name: Commit version updates
        run: |
          git add package.json Cargo.toml
          git commit -m "Update version to $NEW_VERSION"
          git push origin ${{ env.RELEASE_BRANCH }}
