name: Pre-Release Workflow

on:
  push:
    branches:
      - main

jobs:
  version-update:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Get current version from the latest tag
      - name: Get current version
        id: get_version
        run: |
          # Try to get the version from the latest tag
          if git tag -l | grep -q "."; then
            VERSION=$(git describe --tags --abbrev=0)
          else
            # Fallback: Extract version from Cargo.toml
            VERSION=$(grep '^version = ' Cargo.toml | head -n 1 | sed -E 's/version = "(.*)"/\1/')
          fi
          VERSION=${VERSION#v} # Remove the 'v' prefix if present
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 2: Fetch branch name of the most recently merged PR
      - name: Get branch name of most recently merged PR
        id: get_branch_name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          API_URL="https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&per_page=1"
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" $API_URL)
          BRANCH_NAME=$(echo $RESPONSE | jq -r '.[0].head.ref')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      # Step 3: Use the branch name
      - name: Use the branch name
        run: |
          echo "The branch name of the most recently merged PR is: ${{ env.BRANCH_NAME }}"

      # Step 3: Determine next version
      - name: Determine next version
        id: versioning
        run: |
          CURRENT_VERSION=${{ env.VERSION }}
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

          # Determine version increment based on branch prefix
          if [[ "${{ env.BRANCH_NAME }}" == breaking/* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ env.BRANCH_NAME }}" == feature/* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "${{ env.BRANCH_NAME }}" == bugfix/* ]]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH" # Construct the new version
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=release/$NEW_VERSION" >> $GITHUB_ENV
          
      # Step 4: Check if release branch with a larger version already exists
      - name: Check for existing release branches
        id: check_existing_release
        run: |
          git fetch origin
          EXISTING_BRANCH=$(git branch -r | grep "origin/release/" | grep -v "origin/release/$NEW_VERSION" | sed 's|origin/release/||' | sort -V | tail -n 1)
          if [[ -n "$EXISTING_BRANCH" && "$EXISTING_BRANCH" > "$NEW_VERSION" ]]; then
            echo "EXISTING_BRANCH=$EXISTING_BRANCH" >> $GITHUB_ENV
            echo "RELEASE_BRANCH_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_BRANCH_EXISTS=false" >> $GITHUB_ENV
          fi

      # Step 5: Update or Replace Release Branch
      - name: Create or Update Release Branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Check if a larger release branch already exists
          if [ "${{ env.RELEASE_BRANCH_EXISTS }}" == "true" ]; then
            # If the release branch exists, fetch remote changes
            git fetch origin
            git checkout release/${{ env.EXISTING_BRANCH }}

            # Ensure the branch is up-to-date by pulling and merging remote changes
            git pull origin release/${{ env.EXISTING_BRANCH }} --rebase || (
              echo "Pull failed due to conflicts. Aborting."
              git merge --abort
              exit 1
            )

            # Push the updated branch
            git push origin release/${{ env.EXISTING_BRANCH }} || (
              echo "Push failed due to non-fast-forward updates. Attempting force push..."
              git push origin release/${{ env.EXISTING_BRANCH }} --force
            )
          else
            # Close any existing branches and create a new higher version branch
            if [ -n "${{ env.EXISTING_BRANCH }}" ]; then
              git push origin --delete release/${{ env.EXISTING_BRANCH }}
            fi
            
            # Create and push the new release branch
            git checkout -b ${{ env.RELEASE_BRANCH }}
            git push origin ${{ env.RELEASE_BRANCH }}
          fi

      # Step 6: Update version in package.json and Cargo.toml
      - name: Update version files
        run: |
          jq ".version = \"$NEW_VERSION\"" package.json > temp.json && mv temp.json package.json
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}

      # Configure lightweight commit signing
      - name: Configure lightweight commit signing
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global commit.gpgsign false
          git config --global gpg.program true # Use GitHub's token-based verification

      # Step 7: Commit version updates to the release branch
      - name: Commit version updates
        run: |
          git add package.json Cargo.toml
          git commit -m "Update version to $NEW_VERSION"
          git push origin ${{ env.RELEASE_BRANCH }}

      # Step 8: Create or Update Pull Request
      - name: Create or Update Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.RELEASE_BRANCH }}
          title: "Release $NEW_VERSION"
          body: |
            This pull request prepares the release of version $NEW_VERSION.
            It contains the following changes:
            - Updated `package.json` and `Cargo.toml` to version $NEW_VERSION.
          base: main
          labels: |
            automated
            release
