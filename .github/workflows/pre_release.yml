name: Pre-Release Workflow

on:
  pull_request:
    types: [closed]
    branches: ["main"]

jobs:
  version-update:
    # Only run this job when a PR was merged and its source branch does not start with "release/"
    if: >
      github.event.pull_request.merged == true &&
      !startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Get the current version (from the latest tag or Cargo.toml)
      - name: Get current version
        id: get_version
        run: |
          if git tag -l | grep -q "."; then
            VERSION=$(git describe --tags --abbrev=0)
          else
            VERSION=$(grep '^version = ' Cargo.toml | head -n 1 | sed -E 's/version = "(.*)"/\1/')
          fi
          # Normalize version by stripping a leading "v", if present
          VERSION=${VERSION#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Current version is: $VERSION"

      # 3. Capture the merged PR’s source branch (using the event payload)
      - name: Set merged source branch
        run: |
          echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          echo "Merged PR source branch: ${{ github.event.pull_request.head.ref }}"

      # 4. Determine the next version based on the source branch name
      - name: Determine next version
        id: versioning
        run: |
          CURRENT_VERSION="${{ env.VERSION }}"
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
          PATCH=$(echo "$CURRENT_VERSION" | cut -d. -f3)
          BRANCH_NAME="${{ env.BRANCH_NAME }}"
          if [[ "$BRANCH_NAME" == breaking/* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$BRANCH_NAME" == feature/* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$BRANCH_NAME" == bugfix/* ]]; then
            PATCH=$((PATCH + 1))
          fi
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=release/$NEW_VERSION" >> $GITHUB_ENV
          echo "Next version determined: $NEW_VERSION; Release branch: release/$NEW_VERSION"

      # 5. Debug: Verify that origin/main isn’t already updated (optional)
      - name: Debug - Show version in main
        run: |
          git fetch origin main
          MAIN_VERSION=$(git show origin/main:package.json | jq -r '.version')
          echo "Version from origin/main: $MAIN_VERSION"
          if [ "$MAIN_VERSION" == "${{ env.NEW_VERSION }}" ]; then
            echo "origin/main is already updated to $MAIN_VERSION. Exiting."
            exit 0
          fi

      # 6. Create or update the release branch by resetting it to origin/main
      - name: Create or Update Release Branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin
          BRANCH="${{ env.RELEASE_BRANCH }}"
          if git ls-remote --exit-code --heads origin "$BRANCH"; then
            echo "Release branch '$BRANCH' exists. Checking it out..."
            git checkout "$BRANCH"
            git branch --unset-upstream || true
            git branch --set-upstream-to=origin/"$BRANCH" "$BRANCH"
            # Reset the branch so it is exactly updated from origin/main
            git reset --hard origin/main
          else
            echo "Creating release branch '$BRANCH' from origin/main..."
            git checkout -B "$BRANCH" origin/main
            git push origin "$BRANCH" --set-upstream --force-with-lease
          fi
          echo "Current branch: $(git branch --show-current)"
          echo "Upstream: $(git rev-parse --abbrev-ref --symbolic-full-name @{u})"
          git log --oneline -5

      # 7. Update the version in package.json and Cargo.toml
      - name: Update version files
        run: |
          echo "Updating version files to version ${{ env.NEW_VERSION }}..."
          # Update package.json safely using jq
          jq --arg newver "${{ env.NEW_VERSION }}" '.version = $newver' package.json > temp.json && mv temp.json package.json
          # Update Cargo.toml using sed with a flexible regex
          sed -E -i "s/^(version\s*=\s*\").*(\")/\1${{ env.NEW_VERSION }}\2/" Cargo.toml
          echo "Updated package.json:" 
          cat package.json
          echo "Updated Cargo.toml (version line):"
          grep "^version" Cargo.toml

      # 8. Commit changes (adding a dummy file to force a diff)
      - name: Commit version updates
        run: |
          git checkout "${{ env.RELEASE_BRANCH }}"
          echo "Release version: ${{ env.NEW_VERSION }} updated at $(date)" > release-info.txt
          git add package.json Cargo.toml release-info.txt
          if ! git diff-index --quiet HEAD --; then
            git commit -m "Update version to ${{ env.NEW_VERSION }}"
            git push origin "${{ env.RELEASE_BRANCH }}" --force-with-lease
            echo "Version update committed and pushed."
          else
            echo "No changes detected in version files."
          fi
          git log --oneline -3

      # 9. Create a pull request using the GitHub CLI
      - name: Create pull request
        run: |
          echo "Checking for an existing PR for branch ${{ env.RELEASE_BRANCH }}..."
          existing_pr=$(gh pr list --head "${{ env.RELEASE_BRANCH }}" --base main --state open --json url -q '.[0].url')
          if [ -n "$existing_pr" ]; then
            echo "A PR already exists: $existing_pr. Skipping creation."
          else
            echo "No existing PR found, creating a new one for release ${{ env.NEW_VERSION }}..."
            gh pr create -B main -H "${{ env.RELEASE_BRANCH }}" \
              --title "Release ${{ env.NEW_VERSION }}" \
              --body "This pull request prepares the release of version ${{ env.NEW_VERSION }}."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
